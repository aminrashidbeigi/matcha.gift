---
import type { ComponentProps } from 'astro/types'
import { Modal } from 'accessible-astro-components'
import productsData from '../data/products.json'
import interests from '../data/giftmatcher-interests.json'

/**
 * GiftMatcher Component
 *
 * @description A component that allows users to select interests and get gift recommendations
 */

type Interest = {
  id: string
  label: string
}

interface Product {
  id: number
  title: string
  price: number
  image: string
  link: string
  seller: string
  tags: string[]
}

// Map interests to product tags
const interestToTags: Record<string, string[]> = {
  sport: ['fitness', 'health'],
  art: ['creative', 'handmade'],
  travel: ['gift'],
  music: ['music', 'audio'],
  reading: ['writing', 'journal'],
  cooking: ['tea', 'coffee'],
  gaming: ['tech', 'gift'],
  photography: ['tech', 'creative'],
  fashion: ['gift'],
  technology: ['tech', 'smart', 'wireless'],
}

// Function to find the best matching product
function findBestMatch(selectedInterests: string[]) {
  const selectedTags = selectedInterests.flatMap((interest) => interestToTags[interest] || [])

  const scoredProducts = productsData.products.map((product: Product) => {
    const score = product.tags.filter((tag: string) => selectedTags.includes(tag)).length
    return { ...product, score }
  })

  return scoredProducts.reduce((best: Product & { score: number }, current: Product & { score: number }) => {
    return current.score > best.score ? current : best
  }, scoredProducts[0])
}
---

<section class="bg-[var(--background-color)] py-16">
  <div class="container">
    <div class="mx-auto max-w-3xl text-center">
      <h2 class="mb-8 text-4xl font-bold text-[var(--foreground-color)]">Find the Perfect Gift</h2>
      <p class="mb-12 text-xl text-[var(--foreground-color)]">
        Select interests to help us match you with the ideal gift
      </p>

      <div class="mb-12 flex flex-wrap justify-center gap-4">
        {
          interests.map((interest) => (
            <label class="relative inline-flex cursor-pointer items-center">
              <input type="checkbox" class="peer sr-only" name="interests" value={interest.id} />
              <div class="rounded-full border-2 border-[var(--link-color)] px-6 py-3 text-[var(--link-color)] transition-colors duration-200 peer-not-checked:bg-transparent peer-not-checked:text-[var(--link-color)] peer-checked:bg-[var(--link-color)] peer-checked:text-[var(--color-neutral-100)] hover:bg-[var(--link-hover-color)] active:bg-[var(--link-hover-color)]">
                {interest.label}
              </div>
            </label>
          ))
        }
      </div>

      <button id="gift-match-trigger" class="button button-primary px-8 py-4 text-lg"> Match My Gift </button>
    </div>
  </div>
</section>

<Modal triggerId="gift-match-trigger" title="Your Perfect Gift Match" closeText="Close">
  <div class="p-6">
    <div id="gift-match-result" class="space-y-6">
      <p class="text-xl text-[var(--foreground-color)]">
        Based on your interests, we've found the perfect gift for you!
      </p>
      <div class="rounded-lg border border-[var(--border-color-subtle)] bg-[var(--background-color)] p-6">
        <div class="flex flex-col gap-6 md:flex-row">
          <img id="gift-image" src="" alt="" class="h-48 w-full rounded-lg object-cover md:w-1/2" />
          <div class="flex-1 space-y-4">
            <h3 id="gift-title" class="text-2xl font-bold text-[var(--foreground-color)]"></h3>
            <p id="gift-price" class="text-xl font-semibold text-[var(--foreground-color)]"></p>
            <p id="gift-seller" class="text-[var(--foreground-color)] opacity-70"></p>
            <div id="gift-tags" class="flex flex-wrap gap-2"></div>
            <a
              id="gift-link"
              href="#"
              target="_blank"
              rel="noopener noreferrer"
              class="block w-full rounded-lg bg-[var(--link-color)] py-2 text-center text-[var(--color-neutral-100)] transition-colors hover:bg-[var(--link-hover-color)]"
            >
              View Product
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</Modal>

<script>
  // Define types
  interface Product {
    id: number
    title: string
    price: number
    image: string
    link: string
    seller: string
    tags: string[]
  }

  // Define the products data
  const productsData = {
    products: [
      {
        id: 1,
        title: 'Handmade Ceramic Mug',
        price: 24.99,
        image: 'https://images.unsplash.com/photo-1514228742587-6b1558fcca3d?w=500',
        link: 'https://example.com/ceramic-mug',
        seller: 'Artisan Pottery',
        tags: ['coffee', 'tea', 'handmade', 'ceramic', 'gift'],
      },
      {
        id: 2,
        title: 'Leather Journal',
        price: 29.99,
        image: 'https://images.unsplash.com/photo-1544947950-fa07a98d237f?w=500',
        link: 'https://example.com/leather-journal',
        seller: 'Bookbinders Co',
        tags: ['writing', 'journal', 'leather', 'gift', 'creative'],
      },
      {
        id: 3,
        title: 'Wireless Earbuds',
        price: 89.99,
        image: 'https://images.unsplash.com/photo-1572569511254-d8f925fe2cbb?w=500',
        link: 'https://example.com/wireless-earbuds',
        seller: 'TechGadgets',
        tags: ['tech', 'music', 'wireless', 'gift', 'audio'],
      },
      {
        id: 4,
        title: 'Organic Tea Set',
        price: 45.99,
        image: 'https://images.unsplash.com/photo-1564890369478-c89ca6d9cde9?w=500',
        link: 'https://example.com/tea-set',
        seller: 'TeaTime',
        tags: ['tea', 'ceramic', 'gift', 'organic', 'coffee'],
      },
      {
        id: 5,
        title: 'Smart Watch',
        price: 199.99,
        image: 'https://images.unsplash.com/photo-1579586337278-3befd40fd17a?w=500',
        link: 'https://example.com/smart-watch',
        seller: 'TechGadgets',
        tags: ['tech', 'fitness', 'gift', 'smart', 'health'],
      },
    ],
  }

  // Define the interest to tags mapping
  const interestToTags: Record<string, string[]> = {
    sport: ['fitness', 'health'],
    art: ['creative', 'handmade'],
    travel: ['gift'],
    music: ['music', 'audio'],
    reading: ['writing', 'journal'],
    cooking: ['tea', 'coffee'],
    gaming: ['tech', 'gift'],
    photography: ['tech', 'creative'],
    fashion: ['gift'],
    technology: ['tech', 'smart', 'wireless'],
  }

  // Function to find the best matching product
  function findBestMatch(selectedInterests: string[]) {
    const selectedTags = selectedInterests.flatMap((interest) => interestToTags[interest] || [])

    const scoredProducts = productsData.products.map((product: Product) => {
      const score = product.tags.filter((tag: string) => selectedTags.includes(tag)).length
      return { ...product, score }
    })

    return scoredProducts.reduce((best: Product & { score: number }, current: Product & { score: number }) => {
      return current.score > best.score ? current : best
    }, scoredProducts[0])
  }

  function updateGiftMatch() {
    const selectedInterests = Array.from(document.querySelectorAll('input[name="interests"]:checked')).map(
      (input) => (input as HTMLInputElement).value,
    )

    if (selectedInterests.length === 0) {
      alert('Please select at least one interest')
      return
    }

    // Find the best matching product
    const bestMatch = findBestMatch(selectedInterests)

    // Update the modal content
    const imageElement = document.getElementById('gift-image') as HTMLImageElement
    const titleElement = document.getElementById('gift-title')
    const priceElement = document.getElementById('gift-price')
    const sellerElement = document.getElementById('gift-seller')
    const linkElement = document.getElementById('gift-link') as HTMLAnchorElement
    const tagsContainer = document.getElementById('gift-tags')

    if (!imageElement || !titleElement || !priceElement || !sellerElement || !linkElement || !tagsContainer) {
      console.error('Could not find all required elements')
      return
    }

    imageElement.src = bestMatch.image
    imageElement.alt = bestMatch.title
    titleElement.textContent = bestMatch.title
    priceElement.textContent = `$${bestMatch.price}`
    sellerElement.textContent = `Seller: ${bestMatch.seller}`
    linkElement.href = bestMatch.link

    // Update tags
    tagsContainer.innerHTML = ''
    bestMatch.tags.forEach((tag: string) => {
      const tagElement = document.createElement('span')
      tagElement.className = `px-2 py-1 rounded-full text-sm ${
        selectedInterests.some((interest) => interestToTags[interest]?.includes(tag))
          ? 'bg-[var(--color-primary-100)] text-[var(--color-primary-900)] dark:bg-[var(--color-primary-900)] dark:text-[var(--color-primary-100)]'
          : 'bg-[var(--color-neutral-100)] text-[var(--color-neutral-900)] dark:bg-[var(--color-neutral-700)] dark:text-[var(--color-neutral-100)]'
      }`
      tagElement.textContent = tag
      tagsContainer.appendChild(tagElement)
    })
  }

  // Add event listener to the match button
  const matchButton = document.getElementById('gift-match-trigger')
  if (matchButton) {
    matchButton.addEventListener('click', updateGiftMatch)
  }
</script>
