---
import type { ComponentProps } from 'astro/types'
import { Modal, Badge } from 'accessible-astro-components'
import productsData from '../data/products.json'
import interests from '../data/giftmatcher-interests.json'

/**
 * GiftMatcher Component
 *
 * @description A component that allows users to select interests and get gift recommendations
 */

type Interest = {
  id: string
  label: string
}

interface Product {
  id: number
  title: string
  price: number
  priceEur: number
  priceRange: string
  image: string
  link: string
  seller: string
  tags: string[]
}

// Map interests to product tags
const interestToTags: Record<string, string[]> = {
  sport: ['fitness', 'health'],
  art: ['creative', 'handmade'],
  travel: ['gift'],
  music: ['music', 'audio'],
  reading: ['writing', 'journal'],
  cooking: ['tea', 'coffee'],
  gaming: ['tech', 'gift'],
  photography: ['tech', 'creative'],
  fashion: ['gift'],
  technology: ['tech', 'smart', 'wireless'],
}

// Function to find the best matching product
function findBestMatch(selectedInterests: string[], selectedPriceRange?: string) {
  const selectedTags = selectedInterests.flatMap((interest) => interestToTags[interest] || [])

  // Filter products by price range
  let filteredProducts = productsData.products.filter(
    (product: Product) => !selectedPriceRange || product.priceRange === selectedPriceRange,
  )

  // If no interests selected, return a random product from filtered list
  if (selectedTags.length === 0) {
    const randomIndex = Math.floor(Math.random() * filteredProducts.length)
    return filteredProducts[randomIndex]
  }

  // If interests are selected, score and find best match
  const scoredProducts = filteredProducts.map((product: Product) => {
    const score = product.tags.filter((tag: string) => selectedTags.includes(tag)).length
    return { ...product, score }
  })

  return scoredProducts.reduce((best: Product & { score: number }, current: Product & { score: number }) => {
    return current.score > best.score ? current : best
  }, scoredProducts[0])
}
---

<section class="bg-[var(--background-color)] py-16">
  <div class="container">
    <div class="mx-auto max-w-3xl text-center">
      <h2 class="mb-8 text-4xl font-bold text-[var(--foreground-color)]">Find the Perfect Gift</h2>
      <p class="mb-12 text-xl text-[var(--foreground-color)]">
        Select interests to help us match you with the ideal gift
      </p>

      <div class="mb-8">
        <label class="mb-4 block text-lg font-semibold text-[var(--foreground-color)]">Price Range</label>
        <div class="flex flex-wrap justify-center gap-4">
          <label class="relative inline-flex cursor-pointer items-center">
            <input type="radio" class="peer sr-only" name="price-range" value="" checked />
            <div
              class="rounded-full border-2 border-[var(--link-color)] px-6 py-3 text-[var(--link-color)] transition-colors duration-200 peer-not-checked:bg-transparent peer-not-checked:text-[var(--link-color)] peer-checked:bg-[var(--link-color)] peer-checked:text-[var(--color-neutral-100)] hover:bg-[var(--link-hover-color)] active:bg-[var(--link-hover-color)]"
            >
              Any Price
            </div>
          </label>
          <label class="relative inline-flex cursor-pointer items-center">
            <input type="radio" class="peer sr-only" name="price-range" value="low" />
            <div
              class="rounded-full border-2 border-[var(--link-color)] px-6 py-3 text-[var(--link-color)] transition-colors duration-200 peer-not-checked:bg-transparent peer-not-checked:text-[var(--link-color)] peer-checked:bg-[var(--link-color)] peer-checked:text-[var(--color-neutral-100)] hover:bg-[var(--link-hover-color)] active:bg-[var(--link-hover-color)]"
            >
              Low ($0 - $50)
            </div>
          </label>
          <label class="relative inline-flex cursor-pointer items-center">
            <input type="radio" class="peer sr-only" name="price-range" value="mid" />
            <div
              class="rounded-full border-2 border-[var(--link-color)] px-6 py-3 text-[var(--link-color)] transition-colors duration-200 peer-not-checked:bg-transparent peer-not-checked:text-[var(--link-color)] peer-checked:bg-[var(--link-color)] peer-checked:text-[var(--color-neutral-100)] hover:bg-[var(--link-hover-color)] active:bg-[var(--link-hover-color)]"
            >
              Mid ($51 - $100)
            </div>
          </label>
          <label class="relative inline-flex cursor-pointer items-center">
            <input type="radio" class="peer sr-only" name="price-range" value="high" />
            <div
              class="rounded-full border-2 border-[var(--link-color)] px-6 py-3 text-[var(--link-color)] transition-colors duration-200 peer-not-checked:bg-transparent peer-not-checked:text-[var(--link-color)] peer-checked:bg-[var(--link-color)] peer-checked:text-[var(--color-neutral-100)] hover:bg-[var(--link-hover-color)] active:bg-[var(--link-hover-color)]"
            >
              High ($100+)
            </div>
          </label>
        </div>
      </div>

      <div class="mb-12">
        <label class="mb-4 block text-lg font-semibold text-[var(--foreground-color)]">Interests</label>
        <div class="flex flex-wrap justify-center gap-4">
          {
            interests.map((interest) => (
              <label class="relative inline-flex cursor-pointer items-center">
                <input type="checkbox" class="peer sr-only" name="interests" value={interest.id} />
                <div class="rounded-full border-2 border-[var(--link-color)] px-6 py-3 text-[var(--link-color)] transition-colors duration-200 peer-not-checked:bg-transparent peer-not-checked:text-[var(--link-color)] peer-checked:bg-[var(--link-color)] peer-checked:text-[var(--color-neutral-100)] hover:bg-[var(--link-hover-color)] active:bg-[var(--link-hover-color)]">
                  {interest.label}
                </div>
              </label>
            ))
          }
        </div>
      </div>

      <div class="flex flex-wrap justify-center gap-4">
        <button id="gift-match-trigger" class="button button-primary px-8 py-4 text-lg">Match My Gift</button>
        <button id="surprise-me-trigger" class="button button-secondary px-8 py-4 text-lg">Surprise Me!</button>
      </div>
    </div>
  </div>
</section>

<Modal triggerId="gift-match-trigger" title="Your Perfect Gift Match" closeText="Close" manual>
  <div class="p-6">
    <div id="gift-match-result" class="space-y-6">
      <div class="gift-modal-card flex flex-col items-center gap-6">
        <img id="gift-image" src="" alt="" class="h-48 w-full max-w-xs rounded-lg border object-cover" />
        <div class="flex-1 space-y-2 text-center">
          <h3 id="gift-title" class="text-2xl font-bold text-[var(--foreground-color)]"></h3>
          <p id="gift-price" class="text-xl font-semibold text-[var(--foreground-color)]"></p>
          <Badge id="gift-seller" type="info" />
          <a
            id="gift-link"
            href="#"
            target="_blank"
            rel="noopener noreferrer"
            class="button button-primary mt-4 block w-full text-center">View Product</a
          >
        </div>
      </div>
    </div>
  </div>
</Modal>

<Modal triggerId="surprise-me-trigger" title="Your Surprise Gift" closeText="Close">
  <div class="p-6">
    <div id="surprise-gift-result" class="space-y-6">
      <div class="gift-modal-card flex flex-col items-center gap-6">
        <img id="surprise-image" src="" alt="" class="h-48 w-full max-w-xs rounded-lg border object-cover" />
        <div class="flex-1 space-y-2 text-center">
          <h3 id="surprise-title" class="text-2xl font-bold text-[var(--foreground-color)]"></h3>
          <p id="surprise-price" class="text-xl font-semibold text-[var(--foreground-color)]"></p>
          <Badge id="surprise-seller" type="info" />
          <a
            id="surprise-link"
            href="#"
            target="_blank"
            rel="noopener noreferrer"
            class="button button-primary mt-4 block w-full text-center">View Product</a
          >
        </div>
      </div>
    </div>
  </div>
</Modal>

<script>
  // Define types
  interface Product {
    id: number
    title: string
    price: number
    priceEur: number
    priceRange: string
    image: string
    link: string
    seller: string
    tags: string[]
  }

  // Initialize currency state
  const currentCurrency = document.documentElement.getAttribute('data-currency') || 'EUR'
  document.documentElement.setAttribute('data-currency', currentCurrency)

  // Define the products data
  const productsData = {
    products: [
      {
        id: 1,
        title: 'Handmade Ceramic Mug',
        price: 24.99,
        priceEur: 20.99,
        priceRange: 'low',
        image: 'https://images.unsplash.com/photo-1514228742587-6b1558fcca3d?w=500',
        link: 'https://example.com/ceramic-mug',
        seller: 'Artisan Pottery',
        tags: ['coffee', 'tea', 'handmade', 'ceramic', 'gift'],
      },
      {
        id: 2,
        title: 'Leather Journal',
        price: 29.99,
        priceEur: 24.99,
        priceRange: 'low',
        image: 'https://images.unsplash.com/photo-1544947950-fa07a98d237f?w=500',
        link: 'https://example.com/leather-journal',
        seller: 'Bookbinders Co',
        tags: ['writing', 'journal', 'leather', 'gift', 'creative'],
      },
      {
        id: 3,
        title: 'Wireless Earbuds',
        price: 89.99,
        priceEur: 74.99,
        priceRange: 'mid',
        image: 'https://images.unsplash.com/photo-1572569511254-d8f925fe2cbb?w=500',
        link: 'https://example.com/wireless-earbuds',
        seller: 'TechGadgets',
        tags: ['tech', 'music', 'wireless', 'gift', 'audio'],
      },
      {
        id: 4,
        title: 'Organic Tea Set',
        price: 45.99,
        priceEur: 39.99,
        priceRange: 'mid',
        image: 'https://images.unsplash.com/photo-1564890369478-c89ca6d9cde9?w=500',
        link: 'https://example.com/tea-set',
        seller: 'TeaTime',
        tags: ['tea', 'ceramic', 'gift', 'organic', 'coffee'],
      },
      {
        id: 5,
        title: 'Smart Watch',
        price: 199.99,
        priceEur: 169.99,
        priceRange: 'high',
        image: 'https://images.unsplash.com/photo-1579586337278-3befd40fd17a?w=500',
        link: 'https://example.com/smart-watch',
        seller: 'TechGadgets',
        tags: ['tech', 'fitness', 'gift', 'smart', 'health'],
      },
    ],
  }

  // Define the interest to tags mapping
  const interestToTags: Record<string, string[]> = {
    sport: ['fitness', 'health'],
    art: ['creative', 'handmade'],
    travel: ['gift'],
    music: ['music', 'audio'],
    reading: ['writing', 'journal'],
    cooking: ['tea', 'coffee'],
    gaming: ['tech', 'gift'],
    photography: ['tech', 'creative'],
    fashion: ['gift'],
    technology: ['tech', 'smart', 'wireless'],
  }

  // Function to find the best matching product
  function findBestMatch(selectedInterests: string[], selectedPriceRange?: string) {
    const selectedTags = selectedInterests.flatMap((interest) => interestToTags[interest] || [])

    // Filter products by price range
    let filteredProducts = productsData.products.filter(
      (product: Product) => !selectedPriceRange || product.priceRange === selectedPriceRange,
    )

    // If no interests selected, return a random product from filtered list
    if (selectedTags.length === 0) {
      const randomIndex = Math.floor(Math.random() * filteredProducts.length)
      return filteredProducts[randomIndex]
    }

    // If interests are selected, score and find best match
    const scoredProducts = filteredProducts.map((product: Product) => {
      const score = product.tags.filter((tag: string) => selectedTags.includes(tag)).length
      return { ...product, score }
    })

    return scoredProducts.reduce((best: Product & { score: number }, current: Product & { score: number }) => {
      return current.score > best.score ? current : best
    }, scoredProducts[0])
  }

  function updateGiftMatch() {
    const selectedInterests = Array.from(document.querySelectorAll('input[name="interests"]:checked')).map(
      (input) => (input as HTMLInputElement).value,
    )
    const selectedPriceRange = (document.querySelector('input[name="price-range"]:checked') as HTMLInputElement)?.value

    // Find the best matching product
    const bestMatch = findBestMatch(selectedInterests, selectedPriceRange)

    if (!bestMatch) {
      alert('No matching products found for the selected criteria')
      return
    }

    // Update the modal content
    const imageElement = document.getElementById('gift-image') as HTMLImageElement
    const titleElement = document.getElementById('gift-title')
    const priceElement = document.getElementById('gift-price')
    const sellerElement = document.getElementById('gift-seller')
    const linkElement = document.getElementById('gift-link') as HTMLAnchorElement

    if (!imageElement || !titleElement || !priceElement || !sellerElement || !linkElement) {
      console.error('Could not find all required elements')
      return
    }

    imageElement.src = bestMatch.image
    imageElement.alt = bestMatch.title
    titleElement.textContent = bestMatch.title
    updatePriceDisplay(priceElement, bestMatch)
    sellerElement.textContent = bestMatch.seller
    linkElement.href = bestMatch.link

    // Open the modal manually
    const modal = document.querySelector('[data-modal="gift-match-trigger"]') as HTMLElement
    if (modal) {
      modal.setAttribute('aria-hidden', 'false')
      modal.classList.remove('hidden')
    }
  }

  function updateSurpriseGift() {
    const randomProduct = getRandomProduct()

    // Update the modal content
    const imageElement = document.getElementById('surprise-image') as HTMLImageElement
    const titleElement = document.getElementById('surprise-title')
    const priceElement = document.getElementById('surprise-price')
    const sellerElement = document.getElementById('surprise-seller')
    const linkElement = document.getElementById('surprise-link') as HTMLAnchorElement

    if (!imageElement || !titleElement || !priceElement || !sellerElement || !linkElement) {
      console.error('Could not find all required elements')
      return
    }

    imageElement.src = randomProduct.image
    imageElement.alt = randomProduct.title
    titleElement.textContent = randomProduct.title
    updatePriceDisplay(priceElement, randomProduct)
    sellerElement.textContent = randomProduct.seller
    linkElement.href = randomProduct.link
  }

  function updatePriceDisplay(element: HTMLElement, product: Product) {
    const currency = document.documentElement.getAttribute('data-currency') || 'USD'
    const symbol = currency === 'USD' ? '$' : '€'
    const price = currency === 'USD' ? product.price : product.priceEur
    element.textContent = `${symbol}${price}`
  }

  // Add click event listener to the match button
  const matchButton = document.getElementById('gift-match-trigger')
  if (matchButton) {
    matchButton.addEventListener('click', updateGiftMatch)
  }

  function getRandomProduct() {
    const randomIndex = Math.floor(Math.random() * productsData.products.length)
    return productsData.products[randomIndex]
  }

  // Add event listener to the surprise button
  const surpriseButton = document.getElementById('surprise-me-trigger')
  if (surpriseButton) {
    surpriseButton.addEventListener('click', updateSurpriseGift)
  }

  // Add event listener for currency changes
  window.addEventListener('currencyChange', () => {
    // Update prices in both modals if they're open
    const giftPrice = document.getElementById('gift-price')
    const surprisePrice = document.getElementById('surprise-price')

    if (giftPrice) {
      const giftTitle = document.getElementById('gift-title')?.textContent
      if (giftTitle) {
        const product = productsData.products.find((p) => p.title === giftTitle)
        if (product) {
          updatePriceDisplay(giftPrice, product)
        }
      }
    }

    if (surprisePrice) {
      const surpriseTitle = document.getElementById('surprise-title')?.textContent
      if (surpriseTitle) {
        const product = productsData.products.find((p) => p.title === surpriseTitle)
        if (product) {
          updatePriceDisplay(surprisePrice, product)
        }
      }
    }
  })

  // Initialize prices when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    const giftPrice = document.getElementById('gift-price')
    const surprisePrice = document.getElementById('surprise-price')

    if (giftPrice) {
      const giftTitle = document.getElementById('gift-title')?.textContent
      if (giftTitle) {
        const product = productsData.products.find((p) => p.title === giftTitle)
        if (product) {
          updatePriceDisplay(giftPrice, product)
        }
      }
    }

    if (surprisePrice) {
      const surpriseTitle = document.getElementById('surprise-title')?.textContent
      if (surpriseTitle) {
        const product = productsData.products.find((p) => p.title === surpriseTitle)
        if (product) {
          updatePriceDisplay(surprisePrice, product)
        }
      }
    }
  })
</script>

<style>
  .button-secondary {
    transition: all 0.2s ease-in-out;
    border: 2px solid var(--link-color);
    background-color: transparent;
    color: var(--link-color);
  }

  .button-secondary:hover {
    background-color: var(--link-color);
    color: var(--color-neutral-100);
  }

  button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
</style>
