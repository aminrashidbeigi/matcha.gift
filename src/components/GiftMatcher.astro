---
import { Icon } from 'astro-icon/components'
import { fetchGiftsForMatcher } from '../lib/api/gifts'
import type { Product } from '../lib/api/gifts'

/**
 * GiftMatcher Component
 *
 * @description A component that allows users to select interests and get gift recommendations
 */

// Fetch products server-side
const { products, currency } = await fetchGiftsForMatcher()

type Interest = {
  id: string
  label: string
}
---

<section class="bg-[var(--background-color)] py-16 pb-24">
  <div class="container">
    <div class="mx-auto max-w-6xl text-center">
      <h2 class="mb-4 text-4xl font-bold text-[var(--foreground-color)]">Find the Perfect Gift</h2>
      <p class="mb-8 text-lg text-[var(--foreground-color)]">
        Select gifts you like, and we'll tailor the results just for you!
      </p>

      <!-- Gift Grid -->
      <div id="gift-grid" class="grid grid-cols-2 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
        {
          products.map((product) => (
            <div
              class="gift-card group relative cursor-pointer overflow-hidden rounded-xl bg-white shadow-md transition-all hover:shadow-lg"
              data-product-id={product.id}
            >
              <div class="relative aspect-square overflow-hidden">
                <img
                  src={product.image}
                  alt={product.title}
                  class="h-full w-full object-cover transition-transform group-hover:scale-105"
                />
                <div class="absolute inset-0 bg-black/0 transition-colors group-hover:bg-black/5" />
              </div>
              <div class="p-4">
                <h3 class="mb-1 line-clamp-2 text-lg font-semibold">{product.title}</h3>
              </div>
            </div>
          ))
        }
      </div>

      <!-- No Results Message -->
      {
        products.length === 0 && (
          <div class="mt-6 text-center text-red-500">No matching products found. Try selecting different gifts!</div>
        )
      }
    </div>
  </div>
</section>

<!-- Selection Progress Bar -->
<div
  id="selection-progress"
  class="sticky bottom-0 z-50 border-t border-[var(--color-neutral-200)] bg-[var(--background-color)] p-4"
>
  <div class="container">
    <div class="mx-auto flex max-w-6xl items-center justify-between">
      <div class="flex items-center gap-2">
        <span id="selection-count" class="text-lg font-semibold">0</span>
        <span class="text-lg">gifts selected</span>
      </div>
      <button id="get-inspired-btn" class="button has-icon animate-press px-6 py-2 text-base">
        <Icon name="lucide:sparkles" />
        Get Inspired
      </button>
    </div>
  </div>
</div>

<script define:vars={{ products }}>
  // Client-side functionality for gift selection
  let selectedGifts = new Set()
  let productsData = products

  // Function to toggle gift selection
  function toggleGiftSelection(productId) {
    const card = document.querySelector(`[data-product-id="${productId}"]`)

    if (selectedGifts.has(productId)) {
      selectedGifts.delete(productId)
      card?.classList.remove('ring-2', 'ring-[var(--link-color)]')
    } else {
      selectedGifts.add(productId)
      card?.classList.add('ring-2', 'ring-[var(--link-color)]')
    }

    updateSelectionProgress()
  }

  // Function to update selection progress
  function updateSelectionProgress() {
    const countElement = document.getElementById('selection-count')
    if (!countElement) return

    const count = selectedGifts.size
    countElement.textContent = count.toString()
  }

  // Initialize when the page loads
  document.addEventListener('astro:page-load', () => {
    // Add click handlers to all gift cards
    const giftCards = document.querySelectorAll('.gift-card')
    giftCards.forEach((card) => {
      const productId = parseInt(card.getAttribute('data-product-id') || '0')
      card.addEventListener('click', () => {
        toggleGiftSelection(productId)
      })
    })

    // Add event listener for get inspired button
    const getInspiredBtn = document.getElementById('get-inspired-btn')
    getInspiredBtn?.addEventListener('click', () => {
      // Get selected products
      const selectedProducts = productsData.filter((p) => selectedGifts.has(p.id))

      // Get all unique tags from selected gifts
      const selectedTags = new Set()
      selectedProducts.forEach((product) => {
        product.tags.forEach((tag) => selectedTags.add(tag.name.toLowerCase()))
      })

      // Build URL parameters with tags
      const params = new URLSearchParams()
      params.set('tags', Array.from(selectedTags).join(','))

      // Redirect to list page with parameters
      window.location.href = `/list?${params.toString()}`
    })
  })
</script>

<style>
  /* Gift card styles */
  .gift-card {
    transition: all 0.2s ease-in-out;
  }

  .gift-card:hover {
    transform: translateY(-4px);
  }

  .gift-card img {
    transition: transform 0.3s ease-in-out;
  }

  .gift-card:hover img {
    transform: scale(1.05);
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .gift-card {
      max-width: 100%;
    }
  }

  /* Button styles */
  .button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s ease-in-out;
    border-radius: 0.5rem;
    background-color: var(--link-color);
    padding: 0.5rem 1rem;
    color: white;
    font-weight: 600;
  }

  .button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
