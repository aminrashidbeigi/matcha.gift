---
import DefaultLayout from '@layouts/DefaultLayout.astro'
import type { Product } from '../lib/api/gifts'
import { Badge } from 'accessible-astro-components'
---

<DefaultLayout title="Your Gift List">
  <script async data-uid="6d033c7061" src="https://amin-rashidbeigi.kit.com/6d033c7061/index.js"></script>

  <section class="bg-[var(--background-color)] py-16">
    <div class="container">
      <div class="mx-auto max-w-6xl">
        <div class="mb-8 flex flex-col items-start gap-4 sm:flex-row sm:items-center sm:justify-between">
          <h1 class="text-4xl font-bold text-[var(--foreground-color)]">Your Personalized Gift List</h1>
          <div class="flex gap-2">
            <button
              id="urgent-delivery-btn"
              class="filter-button button has-icon inline-flex items-center gap-2 px-4 py-2 text-sm"
              data-filter="delivery"
              data-value="instant"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="h-5 w-5"
              >
                <circle cx="12" cy="12" r="10"></circle>
                <polyline points="12 6 12 12 16 14"></polyline>
              </svg>
              <span>Instant Delivery</span>
            </button>
            <button
              id="cheaper-gifts-btn"
              class="filter-button button has-icon inline-flex items-center gap-2 px-4 py-2 text-sm"
              data-filter="priceRange"
              data-value="low"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="h-5 w-5"
              >
                <path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
              </svg>
              <span>Cheaper Gifts</span>
            </button>
          </div>
        </div>

        <!-- Initial Loading State -->
        <div id="initial-loading" class="flex justify-center">
          <span class="spinner"></span>
        </div>

        <!-- Gift Grid -->
        <div id="gift-grid" class="grid hidden grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3"></div>

        <!-- Show More Button -->
        <div id="show-more-container" class="mt-8 hidden text-center">
          <button
            id="show-more-btn"
            class="button has-icon animate-press inline-flex items-center gap-2 px-6 py-2 text-base"
            data-offset="3"
          >
            <span>Show More</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="h-5 w-5"
            >
              <path d="m6 9 6 6 6-6"></path>
            </svg>
          </button>
        </div>

        <!-- Loading State -->
        <div id="loading-spinner" class="mt-6 flex hidden justify-center">
          <span class="spinner"></span>
        </div>

        <!-- No Results Message -->
        <div id="no-results-message" class="mt-6 hidden text-center text-red-500">
          No gifts found matching your criteria. Try adjusting your filters!
        </div>
      </div>
    </div>
  </section>

  <!-- Go to Top Button -->
  <button
    id="go-to-top-btn"
    class="fixed right-4 bottom-4 z-[9999] hidden rounded-full bg-[var(--link-color)] p-3 text-white shadow-lg transition-all duration-300 hover:bg-[var(--link-color)]/90 hover:shadow-xl md:right-6 md:bottom-6"
    onclick="scrollToTop()"
    title="Go to top"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="h-5 w-5 md:h-6 md:w-6"
    >
      <path d="m18 15-6-6-6 6"></path>
    </svg>
  </button>
</DefaultLayout>

<script>
  import { fetchGifts } from '../lib/api/gifts'

  let isLoading = false
  let currentCurrency = 'dollar'

  // Function to update URL parameters
  function updateURLParams() {
    const url = new URL(window.location.href)
    const urgentDeliveryBtn = document.getElementById('urgent-delivery-btn')
    const cheaperGiftsBtn = document.getElementById('cheaper-gifts-btn')

    // Clear existing parameters
    url.searchParams.delete('delivery')
    url.searchParams.delete('priceRange')

    // Add selected parameters
    if (urgentDeliveryBtn?.classList.contains('selected')) {
      url.searchParams.set('delivery', 'instant')
    }
    if (cheaperGiftsBtn?.classList.contains('selected')) {
      url.searchParams.set('priceRange', 'low')
    }

    // Update URL without reloading the page
    window.history.replaceState({}, '', url.toString())
  }

  // Function to handle filter button clicks
  function handleFilterClick(event: Event) {
    const button = event.currentTarget as HTMLButtonElement
    button.classList.toggle('selected')
    updateURLParams()

    // Reload gifts with new filters
    resetAndReloadGifts()
  }

  // Function to reset and reload gifts
  function resetAndReloadGifts() {
    const grid = document.getElementById('gift-grid')
    const showMoreContainer = document.getElementById('show-more-container')
    const showMoreBtn = document.getElementById('show-more-btn')

    if (grid) {
      grid.innerHTML = ''
      grid.classList.add('hidden')
    }
    if (showMoreContainer) {
      showMoreContainer.classList.add('hidden')
    }
    if (showMoreBtn) {
      showMoreBtn.dataset.offset = '3'
      showMoreBtn.classList.remove('hidden')
    }

    loadGifts(0)
  }

  // Function to create a gift card element
  function createGiftCard(product: any, currency: string) {
    const card = document.createElement('div')
    card.className =
      'gift-card group relative overflow-hidden rounded-xl bg-white shadow-md transition-all hover:shadow-lg flex flex-col'

    // Check if product has instant delivery
    const isInstantDelivery = product.delivery === 'instant'

    // Build badges HTML
    let badgesHtml = ''
    if (isInstantDelivery || product.seller) {
      badgesHtml += `<div class="mt-auto pt-2 flex items-center gap-2">`
      if (product.seller) {
        badgesHtml += `<span class="rounded-full px-3 py-1 text-xs font-semibold" style="background-color: var(--color-primary-100); color: var(--color-neutral-900);">${product.seller}</span>`
      }
      if (isInstantDelivery) {
        badgesHtml += `<span class="rounded-full px-2 py-1 text-xs inline-flex items-center gap-1" style="background-color: var(--color-secondary-100); color: var(--color-neutral-900);">
          <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <polyline points="12 6 12 12 16 14"></polyline>
          </svg>
          Instant Delivery
        </span>`
      }
      badgesHtml += `</div>`
    }

    card.innerHTML = `
      <div class="relative flex flex-col h-full">
        <a href="${product.link}" target="_blank" rel="noopener noreferrer" class="block no-underline text-inherit flex-1" style="text-decoration: none; color: inherit;">
          <div class="p-4 pr-10 flex flex-col h-full">
            <div class="flex-1">
              <h3 class="mb-1 line-clamp-2 text-lg font-semibold">${product.title}</h3>
              <p class="text-sm text-gray-600">
                ${currency === 'dollar' ? `$${product.price}` : `â‚¬${product.price}`}
              </p>
            </div>
            ${badgesHtml}
            <Badge
  type="info"
  isButton
  animateOnHover
  animationType="rotate"
  label="Refresh content"
>
  <Icon name="ion:refresh" />
</Badge>
          </div>
        </a>
        <button 
          class="share-btn absolute top-2 right-2 p-2 transition-all opacity-100 sm:opacity-0 sm:group-hover:opacity-100"
          onclick="copyToClipboard('${product.link}', this)"
          title="Copy link"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="h-4 w-4 text-gray-600"
          >
            <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
            <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
          </svg>
        </button>
      </div>
    `

    return card
  }

  // Function to copy link to clipboard
  function copyToClipboard(text: string, button: HTMLElement) {
    // Prevent the click from bubbling up to the card link
    event?.stopPropagation()

    navigator.clipboard
      .writeText(text)
      .then(() => {
        // Show success feedback
        const originalHTML = button.innerHTML
        button.innerHTML = `
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="h-4 w-4 text-green-600"
        >
          <polyline points="20 6 9 17 4 12"></polyline>
        </svg>
      `
        button.classList.remove('bg-green-100')

        // Reset after 2 seconds
        setTimeout(() => {
          button.innerHTML = originalHTML
          button.classList.remove('bg-green-100')
        }, 2000)
      })
      .catch((err) => {
        console.error('Failed to copy: ', err)
        // Fallback for older browsers
        const textArea = document.createElement('textarea')
        textArea.value = text
        document.body.appendChild(textArea)
        textArea.select()
        try {
          document.execCommand('copy')
          // Show success feedback
          const originalHTML = button.innerHTML
          button.innerHTML = `
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="h-4 w-4 text-green-600"
          >
            <polyline points="20 6 9 17 4 12"></polyline>
          </svg>
        `
          button.classList.remove('bg-green-100')

          // Reset after 2 seconds
          setTimeout(() => {
            button.innerHTML = originalHTML
            button.classList.remove('bg-green-100')
          }, 2000)
        } catch (err) {
          console.error('Fallback copy failed: ', err)
        }
        document.body.removeChild(textArea)
      })
  }

  // Make copyToClipboard globally accessible
  ;(window as any).copyToClipboard = copyToClipboard

  // Function to scroll to top smoothly
  function scrollToTop() {
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    })
  }

  // Function to handle scroll events and show/hide go to top button
  function handleScroll() {
    const goToTopBtn = document.getElementById('go-to-top-btn')
    if (!goToTopBtn) return

    // Show button when scrolled down more than 200px (reduced from 300px for better UX)
    if (window.scrollY > 200) {
      goToTopBtn.classList.remove('hidden')
      goToTopBtn.style.display = 'block'
    } else {
      goToTopBtn.classList.add('hidden')
      goToTopBtn.style.display = 'none'
    }
  }

  // Make scrollToTop globally accessible
  ;(window as any).scrollToTop = scrollToTop

  async function loadGifts(offset: number = 0) {
    const loading = document.getElementById('loading-spinner')
    const initialLoading = document.getElementById('initial-loading')
    const noResults = document.getElementById('no-results-message')
    const showMoreBtn = document.getElementById('show-more-btn')
    const showMoreContainer = document.getElementById('show-more-container')
    const grid = document.getElementById('gift-grid')

    if (!loading || !noResults || !showMoreBtn || !grid || !showMoreContainer || !initialLoading || isLoading) return

    try {
      isLoading = true
      if (offset === 0) {
        initialLoading.classList.remove('hidden')
      } else {
        loading.classList.remove('hidden')
        showMoreBtn.classList.add('hidden')
      }

      // Get URL parameters
      const url = new URL(window.location.href)
      const tags = url.searchParams.get('tags')?.split(',').filter(Boolean) || []
      const delivery = url.searchParams.get('delivery') || undefined
      const priceRange = url.searchParams.get('priceRange')

      // Transform price range parameter
      let priceFilter: string | undefined
      if (priceRange) {
        const prices = priceRange.split(',')
        if (prices.length === 1) {
          priceFilter = prices[0]
        }
      }

      const { products, currency } = await fetchGifts(tags, priceFilter, delivery, offset, 3)
      currentCurrency = currency

      if (!products || products.length === 0) {
        noResults.classList.remove('hidden')
        if (offset === 0) {
          grid.classList.add('hidden')
        }
        showMoreContainer.classList.add('hidden')
        return
      }

      // Show the grid if it was hidden
      grid.classList.remove('hidden')
      showMoreContainer.classList.remove('hidden')

      // Create and append new gift cards
      products.forEach((product: any) => {
        const card = createGiftCard(product, currency)
        grid.appendChild(card)
      })

      // Update offset for next load
      const newOffset = offset + products.length
      showMoreBtn.dataset.offset = newOffset.toString()

      // Only show the button if we received the full limit of results
      if (products.length < 3) {
        showMoreContainer.classList.add('hidden')
      } else {
        showMoreBtn.classList.remove('hidden')
      }

      noResults.classList.add('hidden')
    } catch (error) {
      console.error('Error loading gifts:', error)
      noResults.classList.remove('hidden')
    } finally {
      isLoading = false
      loading.classList.add('hidden')
      initialLoading.classList.add('hidden')
    }
  }

  // Add event listeners when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Set up filter button event listeners
    const filterButtons = document.querySelectorAll('.filter-button')
    filterButtons.forEach((button) => {
      button.addEventListener('click', handleFilterClick)
    })

    // Check URL parameters and set initial button states
    const url = new URL(window.location.href)
    const priceRange = url.searchParams.get('priceRange')
    const delivery = url.searchParams.get('delivery')

    const cheaperGiftsBtn = document.getElementById('cheaper-gifts-btn')
    const urgentDeliveryBtn = document.getElementById('urgent-delivery-btn')

    if (cheaperGiftsBtn && priceRange === 'low') {
      cheaperGiftsBtn.classList.add('selected')
    }

    if (urgentDeliveryBtn && delivery === 'instant') {
      urgentDeliveryBtn.classList.add('selected')
    }

    // Set up show more button event listener
    const showMoreBtn = document.getElementById('show-more-btn')
    if (showMoreBtn) {
      showMoreBtn.addEventListener('click', () => {
        const offset = parseInt(showMoreBtn.dataset.offset || '0')
        loadGifts(offset)
      })
    }

    // Set up scroll event listener for go to top button
    window.addEventListener('scroll', handleScroll)

    // Load initial gifts
    loadGifts(0)
  })
</script>

<style>
  .spinner {
    display: inline-block;
    animation: spin 1s ease-in-out infinite;
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-top-color: var(--link-color);
    border-radius: 50%;
    width: 40px;
    height: 40px;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s ease-in-out;
    border-radius: 0.5rem;
    background-color: var(--link-color);
    padding: 0.5rem 1rem;
    color: white;
    font-weight: 600;
  }

  .button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .filter-button {
    border: 2px solid transparent;
    background-color: #f3f4f6;
    color: #374151;
  }

  .filter-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    background-color: #e5e7eb;
  }

  .filter-button.selected {
    border-color: var(--link-color);
    background-color: var(--link-color);
    color: white;
  }

  .filter-button.selected:hover {
    opacity: 0.9;
    background-color: var(--link-color);
  }

  .gift-card,
  .gift-card *,
  .gift-card a,
  .gift-card a * {
    box-shadow: none !important;
    color: inherit !important;
    text-decoration: none !important;
  }
  .gift-card:focus,
  .gift-card:active,
  .gift-card *:focus,
  .gift-card *:active,
  .gift-card a:focus,
  .gift-card a:active,
  .gift-card a *:focus,
  .gift-card a *:active {
    box-shadow: none !important;
    color: inherit !important;
    text-decoration: none !important;
  }

  /* Go to Top Button Styles */
  #go-to-top-btn {
    display: none;
    position: fixed !important;
    transform: translateY(20px);
    opacity: 0;
    z-index: 9999 !important;
    transition: all 0.3s ease-in-out;
  }

  #go-to-top-btn:not(.hidden) {
    display: block !important;
    transform: translateY(0);
    opacity: 1;
  }

  #go-to-top-btn:hover {
    transform: translateY(-2px);
  }

  /* Ensure button is visible on all screen sizes */
  @media (max-width: 768px) {
    #go-to-top-btn {
      right: 1rem !important;
      bottom: 1rem !important;
    }
  }

  @media (min-width: 769px) {
    #go-to-top-btn {
      right: 1.5rem !important;
      bottom: 1.5rem !important;
    }
  }
</style>
